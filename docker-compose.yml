version: '3'

networks:
  challenge-network:
    driver: bridge

services:
  postgres:
    image: postgres:12
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-migrations:/postgres-migrations
    networks:
      - challenge-network

  neo4j:
    image: neo4j:2025.05.0
    restart: always
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
    healthcheck:
      test: wget http://localhost:7474 || exit 1
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
    networks:
      - challenge-network

  migrations:
    image: postgres:12
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./postgres-migrations:/postgres-migrations
    command: > 
      /bin/sh -c '
      for file in /postgres-migrations/*.sql; do
        PGPASSWORD=${POSTGRES_PASSWORD} psql -h postgres -U postgres -v ON_ERROR_STOP=1 \
        -c "SET my.user_manager_password=\"${POSTGRES_USER_MANAGER_PASSWORD}\"" \
        -c "SET my.challenge_manager_password=\"${POSTGRES_CHALLENGE_MANAGER_PASSWORD}\"" \
        -c "SET my.gamification_manager_password=\"${POSTGRES_GAMIFICATION_MANAGER_PASSWORD}\"" \
        -f "$$file"
      done'
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    networks:
      - challenge-network

  rabbitmq:
    image: rabbitmq:3-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - challenge-network

  redis:
    image: redis/redis-stack:latest
    environment:
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD","redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    ports:
      - "6379:6379"
      - "5540:8001"
    networks:
      - challenge-network

  user-manager:
    build:
      context: ./user-manager
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DATASOURCE_URL=jdbc:postgresql://postgres:5432/user-manager-db
      - SPRING_DATASOURCE_USERNAME=user-manager-user
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_USER_MANAGER_PASSWORD}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - AUTH_SECRET=${AUTH_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - challenge-network
    restart: unless-stopped

  challenge-manager:
    build:
      context: ./challenge-manager
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATASOURCE_URL=jdbc:postgresql://postgres:5432/challenge-manager-db
      - SPRING_DATASOURCE_USERNAME=challenge-manager-user
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_CHALLENGE_MANAGER_PASSWORD}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - AUTH_SECRET=${AUTH_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - challenge-network
    restart: unless-stopped

  gamification-manager:
    build:
      context: ./gamification-manager
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - DATASOURCE_URL=jdbc:postgresql://postgres:5432/gamification-manager-db
      - SPRING_DATASOURCE_USERNAME=gamification-manager-user
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_GAMIFICATION_MANAGER_PASSWORD}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_USER=${REDIS_USER}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - AUTH_SECRET=${AUTH_SECRET}
    depends_on:
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - challenge-network
    restart: unless-stopped

  notification-manager:
    build:
      context: ./notification-manager
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - DEFAULT_MAIL_TO=${DEFAULT_MAIL_TO}
      - DEFAULT_MAIL_FROM=${DEFAULT_MAIL_FROM}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - challenge-network
  
  analytics-manager:
    build:
      context: ./analytics-manager
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - AUTH_SECRET=${AUTH_SECRET}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - NEO4J_DATABASE=${NEO4J_DATABASE}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
    depends_on:
      rabbitmq:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - challenge-network

  frontend:
    build:
      context: ./fe
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - user-manager
      - challenge-manager
      - gamification-manager
    networks:
      - challenge-network
    restart: unless-stopped

volumes:
  postgres-data:
  neo4j-data:
