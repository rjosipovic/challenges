version: '3'

networks:
  challenge-network:
    driver: bridge

services:
  postgres:
    image: postgres:12
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=postgres
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-migrations:/postgres-migrations
    networks:
      - challenge-network

  migrations:
    image: postgres:12
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./postgres-migrations:/postgres-migrations
    command: > 
      /bin/sh -c '
      for file in /postgres-migrations/*.sql; do
        PGPASSWORD=${POSTGRES_PASSWORD} psql -h postgres -U postgres -v ON_ERROR_STOP=1 \
        -c "SET my.user_manager_password=\"${POSTGRES_USER_MANAGER_PASSWORD}\"" \
        -c "SET my.challenge_manager_password=\"${POSTGRES_CHALLENGE_MANAGER_PASSWORD}\"" \
        -f "$$file"
      done'
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
    networks:
      - challenge-network

  user-manager:
    build:
      context: ./user-manager
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - DATASOURCE_URL=jdbc:postgresql://postgres:5432/user-manager-db
      - SPRING_DATASOURCE_USERNAME=user-manager-user
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_USER_MANAGER_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - challenge-network
    restart: unless-stopped

  challenge-manager:
    build:
      context: ./challenge-manager
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DATASOURCE_URL=jdbc:postgresql://postgres:5432/challenge-manager-db
      - SPRING_DATASOURCE_USERNAME=challenge-manager-user
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_CHALLENGE_MANAGER_PASSWORD}
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    networks:
      - challenge-network
    restart: unless-stopped

  frontend:
    build:
      context: ./fe
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - user-manager
      - challenge-manager
    networks:
      - challenge-network
    restart: unless-stopped

volumes:
  postgres-data:
